(()=>{"use strict";var e={321:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.render=void 0,r.render=(e,r,t)=>{e.innerHTML="",e.setAttribute("style",`grid-template-columns: repeat(${r}, 50px)`);for(let t=0;t<r*r;t++){const r=document.createElement("div");r.classList.add("cell"),e.appendChild(r)}Array.from(e.children).forEach(((e,l)=>{var n,o;e.setAttribute("cellX",String(l%r)),e.setAttribute("cellY",String(Math.floor(l/r))),e.innerHTML=null!==(o=null===(n=null==t?void 0:t[Math.floor(l/r)])||void 0===n?void 0:n[l%r])&&void 0!==o?o:null}))}}},r={};function t(l){var n=r[l];if(void 0!==n)return n.exports;var o=r[l]={exports:{}};return e[l](o,o.exports,t),o.exports}(()=>{const e=t(321),r={"x player":"x","o player":"o"};let l=Object.keys(r)[0],n=!1,o=new Array(5).fill(null).map((e=>new Array(5).fill(null)));const i=document.querySelector(".field"),d=document.querySelector(".currPlayer"),u=document.querySelector(".reload"),c=document.querySelector(".winner");i.addEventListener("click",(e=>{if(n)return;const t=e.target;if(t.classList.contains("cell")){const[e,v]=[Number(t.getAttribute("cellX")),Number(t.getAttribute("cellY"))];if(((e,r,t)=>{var l,n;return null!==(n=null===(l=null==t?void 0:t[e])||void 0===l?void 0:l[r])&&void 0!==n?n:null})(v,e,o))return;t.innerHTML=r[l],i=e,(u=o)[v][i]=r[l],o=u,((e,t,n)=>{var o,i,d,u;const c={h:0,v:0,dtop:0,dbot:0},v={h:0,v:0,dtop:0,dbot:0};for(let a=-2;a<3;a++){if((null===(o=null==n?void 0:n[t])||void 0===o?void 0:o[e-a])===r[l]){if(c.h++,c.h>=3)return!0;c.h>v.h&&v.h++}else c.h=0;if((null===(i=null==n?void 0:n[t-a])||void 0===i?void 0:i[e])===r[l]){if(c.v++,c.v>=3)return!0;c.v>v.v&&v.v++}else c.v=0;if((null===(d=null==n?void 0:n[t-a])||void 0===d?void 0:d[e-a])===r[l]){if(c.dtop++,c.dtop>=3)return!0;c.dtop>v.dtop&&v.dtop++}else c.dtop=0;if((null===(u=null==n?void 0:n[t-a])||void 0===u?void 0:u[e- -1*a])===r[l]){if(c.dbot++,c.dbot>=3)return!0;c.dbot>v.dbot&&v.dbot++}else c.dbot=0;if(3===Math.max(...Object.values(v)))return!0}return!1})(e,v,o)?(n=!0,c.innerHTML=l+" win!"):(e=>{for(let r=0;r<5;r++)for(let t=0;t<5;t++)if(!e[r][t])return!1;return!0})(o)&&(c.innerHTML="Ничья"),l=l===Object.keys(r)[0]?Object.keys(r)[1]:Object.keys(r)[0],d.innerHTML=l+"'s move"}var i,u})),(0,e.render)(i,5,o),u.onclick=()=>{Array.from(i.children).map((e=>e.innerHTML="")),o=new Array(5).fill(null).map((e=>new Array(5).fill(null))),n=!1,l=Object.keys(r)[0],d.innerHTML="",c.innerHTML="",(0,e.render)(i,5,o)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,